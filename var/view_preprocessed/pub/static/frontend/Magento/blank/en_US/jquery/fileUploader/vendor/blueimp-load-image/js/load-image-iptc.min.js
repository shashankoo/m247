;(function(factory){'use strict'
if(typeof define==='function'&&define.amd){define(['jquery/fileUploader/vendor/blueimp-load-image/js/load-image','jquery/fileUploader/vendor/blueimp-load-image/js/load-image-meta'],factory)}else if(typeof module==='object'&&module.exports){factory(require('jquery/fileUploader/vendor/blueimp-load-image/js/load-image'),require('jquery/fileUploader/vendor/blueimp-load-image/js/load-image-meta'))}else{factory(window.loadImage)}})(function(loadImage){'use strict'
function IptcMap(){}
IptcMap.prototype.map={ObjectName:5}
IptcMap.prototype.types={0:'Uint16',200:'Uint16',201:'Uint16',202:'binary'}
IptcMap.prototype.get=function(id){return this[id]||this[this.map[id]]}
function getStringValue(dataView,offset,length){var outstr=''
var end=offset+length
for(var n=offset;n<end;n+=1){outstr+=String.fromCharCode(dataView.getUint8(n))}
return outstr}
function getTagValue(tagCode,map,dataView,offset,length){if(map.types[tagCode]==='binary'){return new Blob([dataView.buffer.slice(offset,offset+length)])}
if(map.types[tagCode]==='Uint16'){return dataView.getUint16(offset)}
return getStringValue(dataView,offset,length)}
function combineTagValues(value,newValue){if(value===undefined)return newValue
if(value instanceof Array){value.push(newValue)
return value}
return[value,newValue]}
function parseIptcTags(dataView,segmentOffset,segmentLength,data,includeTags,excludeTags){var value,tagSize,tagCode
var segmentEnd=segmentOffset+segmentLength
var offset=segmentOffset
while(offset<segmentEnd){if(dataView.getUint8(offset)===0x1c&&dataView.getUint8(offset+1)===0x02){tagCode=dataView.getUint8(offset+2)
if((!includeTags||includeTags[tagCode])&&(!excludeTags||!excludeTags[tagCode])){tagSize=dataView.getInt16(offset+3)
value=getTagValue(tagCode,data.iptc,dataView,offset+5,tagSize)
data.iptc[tagCode]=combineTagValues(data.iptc[tagCode],value)
if(data.iptcOffsets){data.iptcOffsets[tagCode]=offset}}}
offset+=1}}
function isSegmentStart(dataView,offset){return(dataView.getUint32(offset)===0x3842494d&&dataView.getUint16(offset+4)===0x0404)}
function getHeaderLength(dataView,offset){var length=dataView.getUint8(offset+7)
if(length%2!==0)length+=1
if(length===0){length=4}
return length}
loadImage.parseIptcData=function(dataView,offset,length,data,options){if(options.disableIptc){return}
var markerLength=offset+length
while(offset+8<markerLength){if(isSegmentStart(dataView,offset)){var headerLength=getHeaderLength(dataView,offset)
var segmentOffset=offset+8+headerLength
if(segmentOffset>markerLength){console.log('Invalid IPTC data: Invalid segment offset.')
break}
var segmentLength=dataView.getUint16(offset+6+headerLength)
if(offset+segmentLength>markerLength){console.log('Invalid IPTC data: Invalid segment size.')
break}
data.iptc=new IptcMap()
if(!options.disableIptcOffsets){data.iptcOffsets=new IptcMap()}
parseIptcTags(dataView,segmentOffset,segmentLength,data,options.includeIptcTags,options.excludeIptcTags||{202:true})
return}
offset+=1}}
loadImage.metaDataParsers.jpeg[0xffed].push(loadImage.parseIptcData)
loadImage.IptcMap=IptcMap})