;(function($){'use strict'
var urlAPI=$.URL||$.webkitURL
function createObjectURL(blob){return urlAPI?urlAPI.createObjectURL(blob):false}
function revokeObjectURL(url){return urlAPI?urlAPI.revokeObjectURL(url):false}
function revokeHelper(url,options){if(url&&url.slice(0,5)==='blob:'&&!(options&&options.noRevoke)){revokeObjectURL(url)}}
function readFile(file,onload,onerror,method){if(!$.FileReader)return false
var reader=new FileReader()
reader.onload=function(){onload.call(reader,this.result)}
if(onerror){reader.onabort=reader.onerror=function(){onerror.call(reader,this.error)}}
var readerMethod=reader[method||'readAsDataURL']
if(readerMethod){readerMethod.call(reader,file)
return reader}}
function isInstanceOf(type,obj){return Object.prototype.toString.call(obj)==='[object '+type+']'}
function loadImage(file,callback,options){function executor(resolve,reject){var img=document.createElement('img')
var url
function resolveWrapper(img,data){if(resolve===reject){if(resolve)resolve(img,data)
return}else if(img instanceof Error){reject(img)
return}
data=data||{}
data.image=img
resolve(data)}
function fetchBlobCallback(blob,err){if(err&&$.console)console.log(err)
if(blob&&isInstanceOf('Blob',blob)){file=blob
url=createObjectURL(file)}else{url=file
if(options&&options.crossOrigin){img.crossOrigin=options.crossOrigin}}
img.src=url}
img.onerror=function(event){revokeHelper(url,options)
if(reject)reject.call(img,event)}
img.onload=function(){revokeHelper(url,options)
var data={originalWidth:img.naturalWidth||img.width,originalHeight:img.naturalHeight||img.height}
try{loadImage.transform(img,options,resolveWrapper,file,data)}catch(error){if(reject)reject(error)}}
if(typeof file==='string'){if(loadImage.requiresMetaData(options)){loadImage.fetchBlob(file,fetchBlobCallback,options)}else{fetchBlobCallback()}
return img}else if(isInstanceOf('Blob',file)||isInstanceOf('File',file)){url=createObjectURL(file)
if(url){img.src=url
return img}
return readFile(file,function(url){img.src=url},reject)}}
if($.Promise&&typeof callback!=='function'){options=callback
return new Promise(executor)}
return executor(callback,callback)}
loadImage.requiresMetaData=function(options){return options&&options.meta}
loadImage.fetchBlob=function(url,callback){callback()}
loadImage.transform=function(img,options,callback,file,data){callback(img,data)}
loadImage.global=$
loadImage.readFile=readFile
loadImage.isInstanceOf=isInstanceOf
loadImage.createObjectURL=createObjectURL
loadImage.revokeObjectURL=revokeObjectURL
if(typeof define==='function'&&define.amd){define(function(){return loadImage})}else if(typeof module==='object'&&module.exports){module.exports=loadImage}else{$.loadImage=loadImage}})((typeof window!=='undefined'&&window)||this)