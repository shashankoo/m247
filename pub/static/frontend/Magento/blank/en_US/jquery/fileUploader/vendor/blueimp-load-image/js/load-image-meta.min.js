;(function(factory){'use strict'
if(typeof define==='function'&&define.amd){define(['jquery/fileUploader/vendor/blueimp-load-image/js/load-image'],factory)}else if(typeof module==='object'&&module.exports){factory(require('jquery/fileUploader/vendor/blueimp-load-image/js/load-image'))}else{factory(window.loadImage)}})(function(loadImage){'use strict'
var global=loadImage.global
var originalTransform=loadImage.transform
var blobSlice=global.Blob&&(Blob.prototype.slice||Blob.prototype.webkitSlice||Blob.prototype.mozSlice)
var bufferSlice=(global.ArrayBuffer&&ArrayBuffer.prototype.slice)||function(begin,end){end=end||this.byteLength-begin
var arr1=new Uint8Array(this,begin,end)
var arr2=new Uint8Array(end)
arr2.set(arr1)
return arr2.buffer}
var metaDataParsers={jpeg:{0xffe1:[],0xffed:[]}}
function parseMetaData(file,callback,options,data){var that=this
function executor(resolve,reject){if(!(global.DataView&&blobSlice&&file&&file.size>=12&&file.type==='image/jpeg')){return resolve(data)}
var maxMetaDataSize=options.maxMetaDataSize||262144
if(!loadImage.readFile(blobSlice.call(file,0,maxMetaDataSize),function(buffer){var dataView=new DataView(buffer)
if(dataView.getUint16(0)!==0xffd8){return reject(new Error('Invalid JPEG file: Missing JPEG marker.'))}
var offset=2
var maxOffset=dataView.byteLength-4
var headLength=offset
var markerBytes
var markerLength
var parsers
var i
while(offset<maxOffset){markerBytes=dataView.getUint16(offset)
if((markerBytes>=0xffe0&&markerBytes<=0xffef)||markerBytes===0xfffe){markerLength=dataView.getUint16(offset+2)+2
if(offset+markerLength>dataView.byteLength){console.log('Invalid JPEG metadata: Invalid segment size.')
break}
parsers=metaDataParsers.jpeg[markerBytes]
if(parsers&&!options.disableMetaDataParsers){for(i=0;i<parsers.length;i+=1){parsers[i].call(that,dataView,offset,markerLength,data,options)}}
offset+=markerLength
headLength=offset}else{break}}
if(!options.disableImageHead&&headLength>6){data.imageHead=bufferSlice.call(buffer,0,headLength)}
resolve(data)},reject,'readAsArrayBuffer')){resolve(data)}}
options=options||{}
if(global.Promise&&typeof callback!=='function'){options=callback||{}
data=options
return new Promise(executor)}
data=data||{}
return executor(callback,callback)}
function replaceJPEGHead(blob,oldHead,newHead){if(!blob||!oldHead||!newHead)return null
return new Blob([newHead,blobSlice.call(blob,oldHead.byteLength)],{type:'image/jpeg'})}
function replaceHead(blob,head,callback){var options={maxMetaDataSize:256,disableMetaDataParsers:true}
if(!callback&&global.Promise){return parseMetaData(blob,options).then(function(data){return replaceJPEGHead(blob,data.imageHead,head)})}
parseMetaData(blob,function(data){callback(replaceJPEGHead(blob,data.imageHead,head))},options)}
loadImage.transform=function(img,options,callback,file,data){if(loadImage.requiresMetaData(options)){data=data||{}
parseMetaData(file,function(result){if(result!==data){if(global.console)console.log(result)
result=data}
originalTransform.call(loadImage,img,options,callback,file,result)},options,data)}else{originalTransform.apply(loadImage,arguments)}}
loadImage.blobSlice=blobSlice
loadImage.bufferSlice=bufferSlice
loadImage.replaceHead=replaceHead
loadImage.parseMetaData=parseMetaData
loadImage.metaDataParsers=metaDataParsers})