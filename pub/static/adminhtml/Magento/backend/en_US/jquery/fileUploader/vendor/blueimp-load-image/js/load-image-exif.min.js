;(function(factory){'use strict'
if(typeof define==='function'&&define.amd){define(['jquery/fileUploader/vendor/blueimp-load-image/js/load-image','jquery/fileUploader/vendor/blueimp-load-image/js/load-image-meta'],factory)}else if(typeof module==='object'&&module.exports){factory(require('jquery/fileUploader/vendor/blueimp-load-image/js/load-image'),require('jquery/fileUploader/vendor/blueimp-load-image/js/load-image-meta'))}else{factory(window.loadImage)}})(function(loadImage){'use strict'
function ExifMap(tagCode){if(tagCode){Object.defineProperty(this,'map',{value:this.ifds[tagCode].map})
Object.defineProperty(this,'tags',{value:(this.tags&&this.tags[tagCode])||{}})}}
ExifMap.prototype.map={Orientation:0x0112,Thumbnail:'ifd1',Blob:0x0201,Exif:0x8769,GPSInfo:0x8825,Interoperability:0xa005}
ExifMap.prototype.ifds={ifd1:{name:'Thumbnail',map:ExifMap.prototype.map},0x8769:{name:'Exif',map:{}},0x8825:{name:'GPSInfo',map:{}},0xa005:{name:'Interoperability',map:{}}}
ExifMap.prototype.get=function(id){return this[id]||this[this.map[id]]}
function getExifThumbnail(dataView,offset,length){if(!length)return
if(offset+length>dataView.byteLength){console.log('Invalid Exif data: Invalid thumbnail data.')
return}
return new Blob([loadImage.bufferSlice.call(dataView.buffer,offset,offset+length)],{type:'image/jpeg'})}
var ExifTagTypes={1:{getValue:function(dataView,dataOffset){return dataView.getUint8(dataOffset)},size:1},2:{getValue:function(dataView,dataOffset){return String.fromCharCode(dataView.getUint8(dataOffset))},size:1,ascii:true},3:{getValue:function(dataView,dataOffset,littleEndian){return dataView.getUint16(dataOffset,littleEndian)},size:2},4:{getValue:function(dataView,dataOffset,littleEndian){return dataView.getUint32(dataOffset,littleEndian)},size:4},5:{getValue:function(dataView,dataOffset,littleEndian){return(dataView.getUint32(dataOffset,littleEndian)/
dataView.getUint32(dataOffset+4,littleEndian))},size:8},9:{getValue:function(dataView,dataOffset,littleEndian){return dataView.getInt32(dataOffset,littleEndian)},size:4},10:{getValue:function(dataView,dataOffset,littleEndian){return(dataView.getInt32(dataOffset,littleEndian)/
dataView.getInt32(dataOffset+4,littleEndian))},size:8}}
ExifTagTypes[7]=ExifTagTypes[1]
function getExifValue(dataView,tiffOffset,offset,type,length,littleEndian){var tagType=ExifTagTypes[type]
var tagSize
var dataOffset
var values
var i
var str
var c
if(!tagType){console.log('Invalid Exif data: Invalid tag type.')
return}
tagSize=tagType.size*length
dataOffset=tagSize>4?tiffOffset+dataView.getUint32(offset+8,littleEndian):offset+8
if(dataOffset+tagSize>dataView.byteLength){console.log('Invalid Exif data: Invalid data offset.')
return}
if(length===1){return tagType.getValue(dataView,dataOffset,littleEndian)}
values=[]
for(i=0;i<length;i+=1){values[i]=tagType.getValue(dataView,dataOffset+i*tagType.size,littleEndian)}
if(tagType.ascii){str=''
for(i=0;i<values.length;i+=1){c=values[i]
if(c==='\u0000'){break}
str+=c}
return str}
return values}
function shouldIncludeTag(includeTags,excludeTags,tagCode){return((!includeTags||includeTags[tagCode])&&(!excludeTags||excludeTags[tagCode]!==true))}
function parseExifTags(dataView,tiffOffset,dirOffset,littleEndian,tags,tagOffsets,includeTags,excludeTags){var tagsNumber,dirEndOffset,i,tagOffset,tagNumber,tagValue
if(dirOffset+6>dataView.byteLength){console.log('Invalid Exif data: Invalid directory offset.')
return}
tagsNumber=dataView.getUint16(dirOffset,littleEndian)
dirEndOffset=dirOffset+2+12*tagsNumber
if(dirEndOffset+4>dataView.byteLength){console.log('Invalid Exif data: Invalid directory size.')
return}
for(i=0;i<tagsNumber;i+=1){tagOffset=dirOffset+2+12*i
tagNumber=dataView.getUint16(tagOffset,littleEndian)
if(!shouldIncludeTag(includeTags,excludeTags,tagNumber))continue
tagValue=getExifValue(dataView,tiffOffset,tagOffset,dataView.getUint16(tagOffset+2,littleEndian),dataView.getUint32(tagOffset+4,littleEndian),littleEndian)
tags[tagNumber]=tagValue
if(tagOffsets){tagOffsets[tagNumber]=tagOffset}}
return dataView.getUint32(dirEndOffset,littleEndian)}
function parseExifIFD(data,tagCode,dataView,tiffOffset,littleEndian,includeTags,excludeTags){var dirOffset=data.exif[tagCode]
if(dirOffset){data.exif[tagCode]=new ExifMap(tagCode)
if(data.exifOffsets){data.exifOffsets[tagCode]=new ExifMap(tagCode)}
parseExifTags(dataView,tiffOffset,tiffOffset+dirOffset,littleEndian,data.exif[tagCode],data.exifOffsets&&data.exifOffsets[tagCode],includeTags&&includeTags[tagCode],excludeTags&&excludeTags[tagCode])}}
loadImage.parseExifData=function(dataView,offset,length,data,options){if(options.disableExif){return}
var includeTags=options.includeExifTags
var excludeTags=options.excludeExifTags||{0x8769:{0x927c:true}}
var tiffOffset=offset+10
var littleEndian
var dirOffset
var thumbnailIFD
if(dataView.getUint32(offset+4)!==0x45786966){return}
if(tiffOffset+8>dataView.byteLength){console.log('Invalid Exif data: Invalid segment size.')
return}
if(dataView.getUint16(offset+8)!==0x0000){console.log('Invalid Exif data: Missing byte alignment offset.')
return}
switch(dataView.getUint16(tiffOffset)){case 0x4949:littleEndian=true
break
case 0x4d4d:littleEndian=false
break
default:console.log('Invalid Exif data: Invalid byte alignment marker.')
return}
if(dataView.getUint16(tiffOffset+2,littleEndian)!==0x002a){console.log('Invalid Exif data: Missing TIFF marker.')
return}
dirOffset=dataView.getUint32(tiffOffset+4,littleEndian)
data.exif=new ExifMap()
if(!options.disableExifOffsets){data.exifOffsets=new ExifMap()
data.exifTiffOffset=tiffOffset
data.exifLittleEndian=littleEndian}
dirOffset=parseExifTags(dataView,tiffOffset,tiffOffset+dirOffset,littleEndian,data.exif,data.exifOffsets,includeTags,excludeTags)
if(dirOffset&&shouldIncludeTag(includeTags,excludeTags,'ifd1')){data.exif.ifd1=dirOffset
if(data.exifOffsets){data.exifOffsets.ifd1=tiffOffset+dirOffset}}
Object.keys(data.exif.ifds).forEach(function(tagCode){parseExifIFD(data,tagCode,dataView,tiffOffset,littleEndian,includeTags,excludeTags)})
thumbnailIFD=data.exif.ifd1
if(thumbnailIFD&&thumbnailIFD[0x0201]){thumbnailIFD[0x0201]=getExifThumbnail(dataView,tiffOffset+thumbnailIFD[0x0201],thumbnailIFD[0x0202])}}
loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)
loadImage.exifWriters={0x0112:function(buffer,data,value){var orientationOffset=data.exifOffsets[0x0112]
if(!orientationOffset)return buffer
var view=new DataView(buffer,orientationOffset+8,2)
view.setUint16(0,value,data.exifLittleEndian)
return buffer}}
loadImage.writeExifData=function(buffer,data,id,value){loadImage.exifWriters[data.exif.map[id]](buffer,data,value)}
loadImage.ExifMap=ExifMap})